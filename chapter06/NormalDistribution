# The Normal Distribution is the classic bell curve-shaped distribution and is determined by 2 parameters:
# Mean u(mu): indicates where the bell is centered.
# Standard deviation o(sigma): indicates how wide the bell is. 

import math
SQRT_TWO_PI = math.sqrt(2 * math.pi)

def normal_pdf(x: float, mu: float = 0, sigma: float = 1) -> float:
    return (math.exp(-(x-mu) ** 2 / 2 / sigma ** 2) / (SQRT_TWO_PI * sigma))
    
# CDF for normal distribution in an "elementary" manner

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2
    
# Binary search to find the value corresponding to a specified probability.

def inverse_normal_cdf(p: float, mu: float = 0, sigma: float = 1, tolerance: float = 0.00001) -> float:
    """Find approximate inverse using binary search"""
    #if not standard, compute standard and rescale
    if mu != 0 or sigma != 1:
        return mu + sigma * inverse_normal_cdf(p, tolerance=tolerance)
        
    low_z =  -10.0                     # normal_cdf(-10) is (very close to) 0
    hi_z  =   10.0                     # normal_cdf(10)  is (very close to) 1           
    while hi_z - low_z > tolerance:
        mid_z = (low_z + hi_z) / 2      # consider midpoint
        mid_p = normal_cdf(mid_z)       # and the CDF's value there
        if mid_p < p:
            low_z = mid_z               # Midpoint too low, search above it
        else:
            hi_z = mid_z                # Midpoint too high, search below it
            
    return mid_z
